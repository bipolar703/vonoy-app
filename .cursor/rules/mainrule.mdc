---
description: 
globs: 
alwaysApply: true
---
---
# Cursor Rules for Vite 6.2.6 + React 19.1 + TailwindCSS 4.1 Project
# Description: This file guides the AI assistant on how to interact with the codebase,
# generate code, and apply edits respecting the tech stack and project conventions.
# Version: 1.0
# Last Updated: 2025-04-16
---

# Global AI Behavior
- Always preserve existing code structure, comments, and formatting unless explicitly instructed to refactor.
- When adding new code, follow the latest React 19.1 functional component patterns with hooks.
- Avoid class components unless legacy code requires maintenance.
- Use ES Modules syntax (import/export) consistently.
- Do not remove or alter TailwindCSS utility classes unless requested.
- When modifying styles, prefer TailwindCSS utility classes over custom CSS.
- Ensure Vite-specific configuration files (vite.config.ts/js) are updated only with explicit user instructions.
- Avoid adding unnecessary dependencies or plugins without user approval.

# React Specific Rules
- Use React 19.1 features such as concurrent mode and suspense where applicable.
- Prefer React Router v6+ for routing; generate routes using lazy loading and Suspense.
- Use React Context API or Zustand for state management; avoid Redux unless specified.
- Write components as pure functions with clear prop types (TypeScript preferred).
- Use React Testing Library for unit and integration tests.
- When generating JSX, ensure accessibility best practices (ARIA attributes, semantic HTML).
- Use React hooks properly: useEffect for side effects, useMemo/useCallback for memoization.
- Avoid deprecated React APIs.

# TailwindCSS Specific Rules
- Use TailwindCSS 4.1 utility classes exclusively for styling.
- Avoid inline styles or CSS modules unless explicitly requested.
- Follow Tailwind’s recommended responsive design patterns (sm, md, lg, xl, 2xl).
- Use Tailwind’s JIT mode features for dynamic class generation.
- When creating custom Tailwind plugins or extending the config, update `tailwind.config.js` accordingly.
- Ensure dark mode support is implemented using Tailwind’s class strategy.
- Avoid conflicting utility classes in the same element.

# Vite Specific Rules
- Use Vite 6.2.6 features such as optimized dependency pre-bundling and native ESM support.
- Keep `vite.config.ts` clean and modular; use plugins only when necessary.
- Use environment variables with the `import.meta.env` syntax.
- Optimize build output for production with code splitting and lazy loading.
- Use Vite’s aliasing feature for cleaner imports (e.g., `@/components`).
- Avoid modifying Vite internals unless explicitly requested.

# Code Quality and Style
- Follow ESLint and Prettier configurations defined in the project.
- Use TypeScript with strict typing enabled.
- Write JSDoc comments for all exported functions and components.
- Ensure all new code passes linting and formatting checks.
- Write unit tests for new features and bug fixes.
- Avoid large components; split into smaller reusable components when possible.

# Editing and Refactoring
- When applying edits, do not remove existing functionality unless explicitly requested.
- Preserve existing comments and documentation.
- When refactoring, maintain backward compatibility.
- Add TODO comments for incomplete or deferred tasks.
- Use Git-friendly diffs; avoid large unrelated changes in a single commit.

# Task Management and Context
- When asked to generate new features, first check for existing similar components or utilities.
- Suggest improvements or optimizations only if they do not break existing behavior.
- For bug fixes, prioritize minimal and targeted changes.
- When multiple solutions exist, prefer the simplest and most maintainable one.
- Always confirm with the user before making architectural changes.

---

# Example Snippet for React Component Generation

```jsx
import React, { useState, useEffect } from 'react';

const ExampleComponent = () => {
  const [count, setCount] = useState(0);

  useEffect(() => {
    document.title = `Count: ${count}`;
  }, [count]);

  return (
    <div className="p-4 bg-gray-100 rounded shadow-md">
      <button
        className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700"
        onClick={() => setCount(count + 1)}
      >
        Increment
      </button>
      <p className="mt-2 text-gray-700">Current count: {count}</p>
    </div>
  );
};

export default ExampleComponent;